// _____________________________________________________________________________
// |                                                                           |
// | DMC-1 TinyGPU                                                             |
// |                                                                           |
// | SPI Screen controller, takes GPU screen commands and drives a screen      |
// |                                                                           |
// | The screen controller is not trully part of the GPU but provided as a     |
// | helper and example of how to implement the controller in a parent SOC.    |
// |                                                                           |
// | This controller is for a ST7789 SPI screen running at 2x the main clock.  |
// | It is in two parts:                                                       |
// | - The main controller screen_controller                                   |
// | - The low level controller unit screen_driver                             |
// |                                                                           |
// | @sylefeb 2022-07-07                                                       |
// |___________________________________________________________________________|
// |                                                                           |
// |  License: CERN-OHL-S                                                      |
// |     A copy of the license full text is included in                        |
// |     the distribution, please refer to it for details.                     |
// |___________________________________________________________________________|

unit screen_controller(
  input   uint1  valid,
  output  uint1  ready,
  input   uint17 in_data,
  input   uint1  screen_ready, // NOTE: this controller expects sole control of
  output  uint1  screen_valid, //       the screen and never checks screen_ready
  output  uint1  send_dc,      //       allowing for faster streaming
  output  uint8  send_byte
) {
  uint16 current_data(0);
  uint4  current_cfg(0);
  uint2  twice(0);
  uint8  wait(0);

  // Two modes: in_data[16,1]
  // - direct 0
  //     in_data[ 0,8] byte
  //     in_data[ 8,1] data or command
  // - pixel 1
  //     in_data[ 0,8] RG
  //     in_data[ 8,8] GB

$$if SIMULATION then
  uint32 cycle(0);
$$end

  always {

    screen_valid = 0; // maintain low

    if (~wait[0,1]) {
      // send the next byte
      current_data = current_data >> 8;
      current_cfg  = current_cfg  >> 2;
      screen_valid = current_cfg [1,1]; // present?
      wait         = current_cfg [1,1] ? 8b11111111 : 8b0;
      twice        = twice >> 1;
    } else {
      // update waiting modulo
      wait = wait >> 1;
    }
    if (valid & ready) {
      current_data = in_data[0,16];
      current_cfg  = in_data[16,1] ? 4b1010 : {2b0,1b1,in_data[8,1]};
      screen_valid = 1;
      wait         = 8b11111111;
      twice        = 2b11;
$$if SIMULATION then
      //__display("[screen buffer %d] starting",cycle);
$$end
    }
    send_byte    =   current_data[0,8];
    send_dc      = ~ current_cfg [0,1]; // data or command
    ready        = ~ twice[0,1];        // ready when both sent

$$if SIMULATION then
    if (screen_valid) {
      //__display("[screen buffer %d] sending next (ready:%b)",cycle,ready);
    }
    cycle = cycle + 1;
$$end
  }

}

// ___________________________________________________________________________
// Driver for a ST7789 SPIscreen
// NOTE: meant to run at clock 2x compared to the screen controller
unit screen_driver(
  input  uint1 valid, input uint1 data_or_command, input uint8 byte,
  output uint1 screen_clk, output uint1 screen_mosi, output uint1 screen_dc,
  output uint1 ready(1)
) {

  uint2 osc        = 1;
  uint1 dc         = 0;
  uint9 sending    = 0;
  uint9 working    = 0;

$$if SIMULATION then
  uint32 cycle(0);
$$end

  always {
    screen_dc   =   dc;
    osc         =   working[0,1] ? {osc[0,1],osc[1,1]} : 2b1;
    screen_clk  =  ~working[0,1] | (osc[1,1]); // SPI Mode 3
    if (valid & ~working[0,1]) {
      //         ^^^^^^^^^^^ as we run double freq, avoids reading start twice
      dc        = data_or_command;
      sending   = { byte[0,1],byte[1,1],byte[2,1],byte[3,1],
                    byte[4,1],byte[5,1],byte[6,1],byte[7,1],1b0};
      working   = 9b111111111;
			osc       = 2b01;
$$if SIMULATION then
      //__display("[screen %d] sending byte %x",cycle,byte);
$$end
    } else {
      screen_mosi = sending[0,1];
      sending     = osc[1,1] ? {1b0,sending[1,8]} : sending;
      working     = osc[1,1] ? {1b0,working[1,8]} : working;
$$if SIMULATION then
      //if (valid) {
      // __display("[screen %d] warning, valid:%b working:%b",cycle,valid,working);
      //}
$$end
    }

$$if SIMULATION then
    //if (working[0,1]) {
    //  __display("[screen %d (%d)] working:%b osc:%b",cycle,cycle>>1,working,osc);
    //}
    cycle = cycle + 1;
$$end
  }
}
