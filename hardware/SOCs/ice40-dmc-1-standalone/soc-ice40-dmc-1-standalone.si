// _____________________________________________________________________________
// |                                                                           |
// | DMC-1 TinyGPU, demo SOC, standalone, received draw calls through UART     |
// |                                                                           |
// | @sylefeb 2020-12-02                                                       |
// |___________________________________________________________________________|
// |                                                                           |
// |  License: CERN-OHL-S                                                      |
// |     A copy of the license full text is included in                        |
// |     the distribution, please refer to it for details.                     |
// |___________________________________________________________________________|

$$SIMUL_QPSRAM          = 1
$$SIMUL_PARALLEL_SCREEN = nil -- use nil for visual display in simulation

$$uart_bauds    = 115200

$$if SIMULATION then
  $$master_freq = 50
  $$uart_in_clock_freq_mhz = master_freq//2
$$else
  $$master_freq = 50
  $$uart_in_clock_freq_mhz = master_freq//2
  import('../../common/ice40_half_clock.v')
$$end

$$clean_reset_width = 4
$include('../../common/clean_reset.si')

$include('../../common/uart.si')

// Using 320x240 screen
$$ST7789             = 1

$$if ICE40 then
import('../../common/plls/icebrkr_$master_freq$.v')
import('../../common/ice40_spram.v')
$$end

$$if SIMULATION then
$include('../../common/simulation_spram.si')
$$end

$include('../../GPUs/dmc-1/dmc-1-standalone.si')
$include('../../GPUs/dmc-1/command_queue.si')
$$if MCH2022 or (SIMULATION and SIMUL_PARALLEL_SCREEN) then
$include('../../GPUs/dmc-1/parallel_screen.si')
$$else
$include('../../GPUs/dmc-1/spi_screen.si')
$$end

// --------------------------------------------------
// PLL for simulation
// --------------------------------------------------

$$if SIMULATION then
algorithm pll(
  output! uint1 clock4x,
  output  uint1 clock2x,
  output  uint1 clock1x,
) <autorun> {
  uint2 counter(0);
  always {
    clock4x =  clock;
    clock2x =  counter[0,1]; // x2 slower
    clock1x = ~counter[1,1]; // x4 slower
    counter =  counter + 1;
  }
}
$$end

// --------------------------------------------------
// Fake receiver for simulation
// --------------------------------------------------

$$if SIMULATION then
$$dofile('simul_cmd_queue.lua')
unit simul_receiver(io_uart_in io)
{
  bram uint8 bytes[] = {$simul_cmd_queue$};

  io.data_out_ready := 0;

  algorithm <autorun> {
    uint24 next(0);

$$if not ICARUS then
    while (next != $#simul_cmd_queue-1$) {
      uint8 wait = 1;
      while (wait != 0) { wait = wait + 1; }
$$else
    while (next != 1024) {
      uint8 wait = 1;
      while (wait != 0) { wait = wait + 1; }
$$end
      // __display("[simul_cmd_queue] next: %d",next);
      io.data_out       = bytes.rdata;
      io.data_out_ready = 1;
      next              = next + 1;
      bytes.addr        = next;
    }
$$if ICARUS then
    {
      uint10 wait = 1;
      while (wait != 0) { wait = wait + 1; }
      __finish();
    }
$$end
  }
}
$$end

// --------------------------------------------------
// Design main
// --------------------------------------------------

algorithm main(
  output uint$NUM_LEDS$ leds,
$$if BUTTONS then
  input  uint$NUM_BTNS$ btns,
$$end
$$if UART then
  output uint1 uart_tx,
  input  uint1 uart_rx,
$$end
$$if QSPIFLASH then
  output  uint1 sf_clk,
  output  uint1 sf_csn,
  inout   uint1 sf_io0,
  inout   uint1 sf_io1,
  inout   uint1 sf_io2,
  inout   uint1 sf_io3,
$$end
$$if PSRAM then
  output  uint1 ram_clk,
  output  uint1 ram_csn,
  inout   uint1 ram_io0,
  inout   uint1 ram_io1,
  inout   uint1 ram_io2,
  inout   uint1 ram_io3,
$$end
$$if OLED then
  output  uint1 oled_clk,
  output  uint1 oled_mosi,
  output  uint1 oled_dc,
  output  uint1 oled_resn,
  output  uint1 oled_csn,
$$if VERILATOR then
  output uint2  spiscreen_driver(2/*ST7789*/),
  output uint10 spiscreen_width (320),
  output uint10 spiscreen_height(240),
$$end
$$end
$$if LCD then
  output uint8 lcd_d,
  output uint1 lcd_rs,
  output uint1 lcd_wr_n,
  output uint1 lcd_cs_n(0),
  output uint1 lcd_rst_n(1),
  input  uint1 lcd_mode,
  input  uint1 lcd_fmark,
$$end
)
$$if ICE40 then
<@clock1x,!rst1x> {
$$if spi4x then
  uint1 clock4x = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock4x,
  );
  uint1 clock1x = uninitialized;
  uint1 clock2x = uninitialized;
  ice40_half_quarter_clock _(
    clock_in  <: clock4x,
    clock_h   :> clock2x,
    clock_q   :> clock1x,
  );
$$else
  uint1 clock2x = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock2x,
  );
  uint1 clock1x = uninitialized;
  ice40_half_clock _(
    clock_in  <: clock2x,
    clock_out :> clock1x
  );
$$end
  uint1 rst1x = uninitialized;
  clean_reset r1x<@clock1x,!reset>(
    out :> rst1x
  );
  uint1 rst2x = uninitialized;
  clean_reset r2x<@clock2x,!reset>(
    out :> rst2x
  );
$$elseif SIMULATION then
<@clock1x> {
  uint1 clock1x = uninitialized;
  uint1 clock2x = uninitialized;
  uint1 clock4x = uninitialized;
  pll clkgen<@clock,!reset>(
    clock1x :> clock1x,
    clock2x :> clock2x,
    clock4x :> clock4x
  );
  uint1 rst1x <: reset;
  uint1 rst2x <: reset;
$$else
{
$$end

$$if SIMULATION then
  // for simulation, create dummy vars to receive inexisting bindings
  // texture memory
  uint1 sf_csn(1); uint1 sf_clk(0); uint1 sf_io0(0);
  uint1 sf_io1(0); uint1 sf_io2(0); uint1 sf_io3(0);
  uint1 ram_csn(1); uint1 ram_clk(0); uint1 ram_io0(0);
  uint1 ram_io1(0); uint1 ram_io2(0); uint1 ram_io3(0);
  // dummy vars for screen
$$if ICARUS then
  uint1 oled_clk(0); uint1 oled_mosi(0); uint1 oled_dc(0); uint1 oled_resn(0);
  uint1 oled_csn(0);
$$end
  uint8 lcd_d(0); uint1 lcd_rs(0); uint1 lcd_wr_n(0); uint1 lcd_cs_n(0);
  uint1 lcd_rst_n(1); uint1 lcd_mode(0); uint1 lcd_fmark(0);
$$end

  // ==============================
  // GPU
  DMC_1_gpu_standalone gpu(
    screen_ready <: screen_ctrl.ready,
    clock2x      <: clock2x,
$$if MCH2022 or (SIMULATION and SIMUL_QPSRAM) then
    ram_clk  :> ram_clk,  ram_csn :>  ram_csn,
    ram_io0 <:> ram_io0,  ram_io1 <:> ram_io1,
    ram_io2 <:> ram_io2,  ram_io3 <:> ram_io3,
$$else
    ram_clk  :> sf_clk,  ram_csn :>  sf_csn,
    ram_io0 <:> sf_io0,  ram_io1 <:> sf_io1,
    ram_io2 <:> sf_io2,  ram_io3 <:> sf_io3,
$$end
  );

  // ==============================
  // screen controller and driver
  uint1 screen_valid(0);    uint1 screen_ready(0);
  uint1 screen_send_dc(0);  uint8 screen_send_byte(0);
  screen_controller screen_ctrl(
    screen_valid :> screen_valid,
    screen_ready <: screen_ready,
    send_dc      :> screen_send_dc,
    send_byte    :> screen_send_byte,
  );
  // ...

$$if MCH2022 or (SIMULATION and SIMUL_PARALLEL_SCREEN) then
  screen_driver screen(
    ready            :> screen_ready,
    screen_d         :> lcd_d,
    screen_dc        :> lcd_rs,
    screen_wrn       :> lcd_wr_n
  );
$$else -- not MCH2022
  uint1 o_mosi(0);
  uint1 o_clk(0);
  uint1 o_dc(0);
  uint1 o_resn(0);
  screen_driver screen<@clock2x,!rst2x,reginputs> (
    ready            :> screen_ready,
$$if VERILATOR then
    screen_mosi      :> oled_mosi,
    screen_clk       :> oled_clk,
    screen_dc        :> oled_dc,
$$else
    screen_mosi      :> o_mosi,
    screen_clk       :> o_clk,
    screen_dc        :> o_dc,
$$end
  );
$$if not SIMULATION then
   sb_io sbio1( clock <: clock2x, out  <: o_clk,  pin  :> oled_clk);
   sb_io sbio0( clock <: clock2x, out  <: o_mosi, pin  :> oled_mosi);
   sb_io sbio2( clock <: clock2x, out  <: o_dc,   pin  :> oled_dc);
   sb_io sbio3( clock <: clock1x, out  <: o_resn, pin  :> oled_resn);
$$end
$$end

  // ==============================
  // UART
  uart_in  ui;
$$if UART then
  uart_receiver urecv<reginputs>(
    io      <:> ui,
    uart_rx <:  uart_rx
  );
$$else
  simul_receiver urecv<reginputs>(
    io      <:> ui
  );
$$end

  // ==============================
  // command queue
  command_queue cmdq(current :> gpu.command);

$$if SIMULATION then
  uint32 cycle(0);
$$end

  uint1  receiving(0);
  uint1  all_zeros(1);
  uint1  next_for_screen(0);
  uint8  received_byte(8b1);
  uint64 received(0);
  uint10 blink(0);
  uint1  synched(0);

  uint1 screen_com <:: receiving & received_byte[0,1] & next_for_screen;

  always {

    gpu           .in_next  = 0;
    cmdq          .in_add   = 0;
    cmdq          .in_next  = 0;
    screen_ctrl   .valid    = (screen_com & ~received[32,1]) | gpu.screen_valid;
    //                                      ^^^^ indicates screen reset
    screen_ctrl   .in_data  = gpu.screen_valid ? {1b1,gpu.screen_data}
                                               : received[0,17];
    screen.valid            = screen_valid;
    screen.data_or_command  = screen_send_dc;
    screen.byte             = screen_send_byte;

$$if SIMULATION then
    oled_resn = (screen_com & received[32,1]) ? received[33,1] : oled_resn;
$$elseif not MCH2022 then
    o_resn    = (screen_com & received[32,1]) ? received[33,1] : o_resn;
$$else
    // lcd_rst_n = (screen_com & received[32,1]) ? received[33,1] : lcd_rst_n;
$$end

$$if MCH2022 then
    lcd_cs_n  = 0;
    lcd_rst_n = 1;
$$end

    // show activity
    leds           = {5{blink[0,1]}};
    blink          = blink >> 1;

    // received a byte from com
    if (ui.data_out_ready) {
      received      = (received << 8) | ui.data_out;
      received_byte = synched ? {received_byte[0,7],received_byte[7,1]} : 8b1;
      receiving     = synched;
      synched       = (ui.data_out == 8haa) | synched;
      all_zeros     = all_zeros & ~(|ui.data_out);
    } else {
      if (receiving & received_byte[0,1]) { // we received a full command (init is null)
        // store in fifo
        cmdq.in_command = received;
        cmdq.in_add     = 1;
        // done
        next_for_screen = all_zeros;
        receiving       = 0;
        all_zeros       = ~all_zeros; // only once
        // show activity
        blink           = 10b1111111111;
      }
    }

    // send next command to GPU?
    gpu.in_next  = gpu.ready & ~cmdq.empty;
    cmdq.in_next = gpu.ready & ~cmdq.empty;

$$if SIMULATION then
    // __display("[cmdq] full:%b empty:%b",cmdq.full,cmdq.empty);
    cycle = cycle + 1;
$$end

  }

}

// -------------------------
